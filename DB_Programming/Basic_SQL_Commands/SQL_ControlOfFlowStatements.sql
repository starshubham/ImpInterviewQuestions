
--------------------------Control-of-flow statements--------------------------------------

/*
BEGIN...END statement:-
	The BEGIN...END statement is used to define a statement block. A statement block consists of a set of SQL statements 
	that execute together. A statement block is also known as a batch.
*/

BEGIN
    SELECT
        FirstName,
        Salary
    FROM
        employee_info
    WHERE
        Salary > 800000;

    IF @@ROWCOUNT = 0
        PRINT 'No employee with salary greater than 800000 found';
END
/*
To view the messages generated by the PRINT statement, in SQL Server Management Studio, you need to click the Messages tab. 
By default, the Messages tab is hidden.
Note that the @@ROWCOUNT is a system variable that returns the number of rows affected by the last previous statement.
*/


------------------------SQL Server Loops---------------------------------

/*	Looping structures allow a single command, or a group of statements, to be executed repeatedly until the specific 
condition result turn out to be false.

Types of Loops:
	DO...WHILE Loop
	FOR LOOP
	WHILE LOOP:- SQL Server implements the WHILE Loop allowing us to repeat a certain code while the loop condition holds.

SQL Server only have while Loop. There is no For Loop and Do While Loop in SQL Server (Transact-SQL). You can simulate the FOR LOOP 
in SQL Server (Transact-SQL) using the WHILE LOOP.

Syntax
The syntax to simulate the FOR Loop in SQL Server (Transact-SQL) is:

DECLARE @cnt INT = 0;

WHILE @cnt < cnt_total
BEGIN
   {...statements...}
   SET @cnt = @cnt + 1;
END;

cnt_total:-
	The number of times that you want the simulated FOR LOOP (ie: WHILE LOOP) to execute.
statements:-
	The statements of code to execute each pass through the loop.

*/

DECLARE @count INT;
SET @count = 10;
While (@count <= 15)
BEGIN
	Print @count;
	SET @count = @count + 1;
END
Print 'End Of While Loop'


DECLARE @count INT;
DECLARE @TableNO INT;
SET @count = 1;
SET @TableNO = 8;
while @count <=10
BEGIN
	Print concat(@TableNo,' x ', @count, ' = ', @TableNO * @count);
	SET @count = @count + 1;
End
Print 'End Of While Loop'


--Table with break statement
DECLARE @count INT;
DECLARE @TableNO INT;
SET @count = 1;
SET @TableNO = 19;
while @count <=10
BEGIN
	Print concat(@TableNo,' x ', @count, ' = ', @TableNO * @count);
	SET @count = @count + 1;
	if @count =5
	break;
End
Print 'End Of While Loop'


--------NESTED WHILE LOOP---------
DECLARE @TableNO INT;
SET @TableNO = 15;
while @TableNO <= 20
BEGIN
	DECLARE @InnerCount int =1;
	while @InnerCount <=10
	Begin
		Print CONCAT(@TableNo,' x ', @InnerCount, ' = ', @TableNO * @InnerCount);
		SET @InnerCount = @InnerCount + 1;
	End
SET @TableNO = @TableNO + 1;
Print ''
End
Print 'End Of Nested Loop'


------------------------------------------------------------------------------------------------

						/* SQL CASE STATEMENT */

-----Case Statement in SELECT Statement-----
Select *,
JOB_ROLE =
Case
	WHEN Salary > 600000 THEN 'Manager'
	WHEN Salary > 400000 AND Salary <= 600000 THEN 'Snr Developer'
	WHEN Salary >=200000 AND Salary <= 400000 THEN 'Jnr Developer'
	Else 'No Role'
End
from employee_info


--------------------------------------------------------------------------

select * from employee_info;

Alter Table employee_info
Add JOB_ROLE varchar(Max);


-----Case Statement in UPDATE Statement-----
Update employee_info Set JOB_ROLE =
Case
	WHEN Salary > 700000 THEN 'Manager'
	WHEN Salary > 600000 AND Salary <= 700000 THEN 'HR'
	WHEN Salary > 400000 AND Salary <= 600000 THEN 'Snr Developer'
	WHEN Salary >=200000 AND Salary <= 400000 THEN 'Jnr Developer'
	Else 'No Role'
End

select * from employee_info;


----Case Statement in INSERT Statement------

Declare @Gender varchar(1)
Set @Gender=1;
Insert Into employee_info(FirstName,LastName,Address,City,PhoneNumber,Salary,StartDate,Gender,State,JOB_ROLE)
VALUES('Arjun','Singh','Jammu','Jammu','8675964876',600000,GETDATE(), CASE WHEN @Gender =1 THEN 'M' else 'F' End,'Jammu and Kashmir','Snr Developer');


---Case Statement in ORDER BY Clause------
Select * from employee_info
ORDER BY 
CASE WHEN (Select Count(Gender) from employee_info where Gender ='M') < 5 THEN City
Else
FirstName
END


--------------------------------------------------------------------------------

---If Else Condition Statement-----------------------
DECLARE @RollNo int;
DECLARE @ENGLISH INT;
DECLARE @MATHS INT;
DECLARE @SCIENCE INT;
DECLARE @TOTAL INT;
DECLARE @PERCENTAGE INT;
---INITILIAZE VARIABLSES
SET @RollNo = 99;
SET @ENGLISH = 45;
SET @MATHS = 50;
SET @SCIENCE = 56;
SET @TOTAL = @ENGLISH+@MATHS+@SCIENCE;
SET @PERCENTAGE = @TOTAL/3;

	PRINT Concat('RollNo: ',@RollNo);
	PRINT Concat ('Total: ',@TOTAL);
	PRINT Concat('Percentage: ',@PERCENTAGE);

IF @PERCENTAGE > 80
BEGIN
	PRINT 'GRADE A';
END
ELSE IF @PERCENTAGE > 60 AND @PERCENTAGE <=80 
BEGIN
	PRINT 'GRADE B';
END
ELSE IF @PERCENTAGE > 40 AND @PERCENTAGE <= 60
BEGIN
	PRINT 'GRADE C';
END
ELSE
BEGIN
	PRINT 'FAIL';
END

------------------------

SELECT * FROM employee_info;

IF EXISTS (SELECT EmployeeID from employee_info where EmployeeID =14)
BEGIN
	PRINT 'EmployeeID EXISTS';
END
ELSE
BEGIN
	PRINT ' EmployeeID DOES NOT EXIST ';
END


-------------------------------------------------------------------------------

					/*	SQL Server Exceptions	*/

/*
System Defined Exceptions:-
	In a system defined exception, the exceptions(errors) are generated by the system.
*/
Declare @val1 int;
Declare @val2 int;
BEGIN TRY
		Set @val1=8;		
		Print 'Line 1';
		Print 'Line 2';
		Set @val2=@val1/0; /* Error Occur Here */
		Print 'Line 3';
		Print 'Line 4';
END TRY
BEGIN CATCH
		Print 'Inside the Catch block';
		Print Concat('ERROR_MESSAGE()=',ERROR_MESSAGE());
		Print Concat('ERROR_LINE()=',ERROR_LINE());
		Print Concat('ERROR_NUMBER()=',ERROR_NUMBER());
		Print Concat('ERROR_SEVERITY()=',ERROR_SEVERITY());
		Print Concat('ERROR_STATE()=',ERROR_STATE());
		Print Concat('ERROR_PROCEDURE()=',ERROR_PROCEDURE());
END CATCH


-----------------------------------------------------------------------

/* 
	User Defined Errors
	The THROW statement in SQL Server raises an exception and transfers the control to a CATCH block.
	Syntax:
	THROW @errorNumber,@errorMessage, @errorSeverity

	Error No-> 50000 to 2147483647
	ERROR Severity
			13-> Indicates transaction deadlock errors.
			14-> Indicates security-related errors, such as permission denied.
			15-> Indicates syntax errors in the Transact-SQL command.
			16-> Indicates general errors that can be corrected by the user
*/
Declare @Age int;
BEGIN TRY
		Set @Age=60;		
		Print 'Line 1';
		Print 'Line 2';
		IF @Age > 40
			THROW 50000,'Age is greater than 40',16;
		Print 'Line 3';
		Print 'Line 4';
END TRY
BEGIN CATCH
		Print 'Inside the Catch block';
		Print Concat('ERROR_MESSAGE()=',ERROR_MESSAGE());
		Print Concat('ERROR_LINE()=',ERROR_LINE());
		Print Concat('ERROR_NUMBER()=',ERROR_NUMBER());
		Print Concat('ERROR_SEVERITY()=',ERROR_SEVERITY());
		Print Concat('ERROR_STATE()=',ERROR_STATE());
		Print Concat('ERROR_PROCEDURE()=',ERROR_PROCEDURE());
END CATCH